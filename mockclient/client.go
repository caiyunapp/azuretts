// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mockclient is a generated GoMock package.
package mockclient

import (
	context "context"
	reflect "reflect"

	azuretts "github.com/caiyunapp/azuretts"
	gomock "go.uber.org/mock/gomock"
)

// MockAccessTokenSaver is a mock of AccessTokenSaver interface.
type MockAccessTokenSaver struct {
	ctrl     *gomock.Controller
	recorder *MockAccessTokenSaverMockRecorder
}

// MockAccessTokenSaverMockRecorder is the mock recorder for MockAccessTokenSaver.
type MockAccessTokenSaverMockRecorder struct {
	mock *MockAccessTokenSaver
}

// NewMockAccessTokenSaver creates a new mock instance.
func NewMockAccessTokenSaver(ctrl *gomock.Controller) *MockAccessTokenSaver {
	mock := &MockAccessTokenSaver{ctrl: ctrl}
	mock.recorder = &MockAccessTokenSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessTokenSaver) EXPECT() *MockAccessTokenSaverMockRecorder {
	return m.recorder
}

// GetAccessToken mocks base method.
func (m *MockAccessTokenSaver) GetAccessToken(arg0 context.Context) (string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockAccessTokenSaverMockRecorder) GetAccessToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockAccessTokenSaver)(nil).GetAccessToken), arg0)
}

// SetAccessToken mocks base method.
func (m *MockAccessTokenSaver) SetAccessToken(arg0 context.Context, arg1 string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccessToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccessToken indicates an expected call of SetAccessToken.
func (mr *MockAccessTokenSaverMockRecorder) SetAccessToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccessToken", reflect.TypeOf((*MockAccessTokenSaver)(nil).SetAccessToken), arg0, arg1, arg2)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetAccessToken mocks base method.
func (m *MockClient) GetAccessToken(arg0 context.Context) (string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockClientMockRecorder) GetAccessToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockClient)(nil).GetAccessToken), arg0)
}

// GetNewAccessToken mocks base method.
func (m *MockClient) GetNewAccessToken(arg0 context.Context) (*azuretts.AccessTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewAccessToken", arg0)
	ret0, _ := ret[0].(*azuretts.AccessTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewAccessToken indicates an expected call of GetNewAccessToken.
func (mr *MockClientMockRecorder) GetNewAccessToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewAccessToken", reflect.TypeOf((*MockClient)(nil).GetNewAccessToken), arg0)
}

// GetSynthesize mocks base method.
func (m *MockClient) GetSynthesize(ctx context.Context, req *azuretts.SynthesisRequest) (*azuretts.SynthesisResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSynthesize", ctx, req)
	ret0, _ := ret[0].(*azuretts.SynthesisResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSynthesize indicates an expected call of GetSynthesize.
func (mr *MockClientMockRecorder) GetSynthesize(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSynthesize", reflect.TypeOf((*MockClient)(nil).GetSynthesize), ctx, req)
}

// SetAccessToken mocks base method.
func (m *MockClient) SetAccessToken(arg0 context.Context, arg1 string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccessToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccessToken indicates an expected call of SetAccessToken.
func (mr *MockClientMockRecorder) SetAccessToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccessToken", reflect.TypeOf((*MockClient)(nil).SetAccessToken), arg0, arg1, arg2)
}
